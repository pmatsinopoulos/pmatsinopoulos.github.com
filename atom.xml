<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[pmatsinopoulos Blog]]></title>
  <link href="http://pmatsinopoulos.github.com/atom.xml" rel="self"/>
  <link href="http://pmatsinopoulos.github.com/"/>
  <updated>2012-10-12T21:59:02+03:00</updated>
  <id>http://pmatsinopoulos.github.com/</id>
  <author>
    <name><![CDATA[Panayotis Matsinopoulos]]></name>
    <email><![CDATA[panayotis@matsinopoulos.gr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Including VS extending a Module]]></title>
    <link href="http://pmatsinopoulos.github.com/blog/2012/10/12/including-vs-extending-a-module/"/>
    <updated>2012-10-12T21:44:00+03:00</updated>
    <id>http://pmatsinopoulos.github.com/blog/2012/10/12/including-vs-extending-a-module</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Demonstration of `include` vs `extend`</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Here, I am define a &quot;module&quot; with name Ma. I also define two methods. One without &quot;self.&quot;</span>
</span><span class='line'><span class="c1"># and one with. See, later on, what happens when I &quot;include&quot; and what happens when I &quot;extend&quot;</span>
</span><span class='line'><span class="c1"># the &quot;module&quot; within a &quot;class&quot;.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Ma</span>
</span><span class='line'>  <span class="c1"># I will be able to make this method an instance or a class method of a class.</span>
</span><span class='line'>  <span class="c1"># It depends whether I will &quot;include&quot; or &quot;extend&quot; the module in the class.</span>
</span><span class='line'>  <span class="c1"># Note that this method, I cannot call it directly on Ma. In order for this method</span>
</span><span class='line'>  <span class="c1"># to be useful, I have to include or extend this module within a class.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ma_method1</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;ma_method1&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># This method, is not reusable, in the sense that I cannot make it be an instance of class</span>
</span><span class='line'>  <span class="c1"># method of a class. But still, it is a method of module Ma and I can call it directly.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">ma_method2</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;ma_method2&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Ma responds to ma_method1? : </span><span class="si">#{</span><span class="no">Ma</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:ma_method1</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># it will print &quot;false&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Ma responds to ma_method2? : </span><span class="si">#{</span><span class="no">Ma</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:ma_method2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># it will print &quot;true&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;-------------&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="c1"># &quot;include&quot; sets the module methods as instance methods of the class</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Ma</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;a Responds to ma_method1?: </span><span class="si">#{</span><span class="n">a</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:ma_method1</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># it will print &quot;true&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;A Responds to ma_method1?: </span><span class="si">#{</span><span class="n">A</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:ma_method1</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># it will print &quot;false&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;a Responds to ma_method2?: </span><span class="si">#{</span><span class="n">a</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:ma_method2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># it will print &quot;false&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;A Responds to ma_method2?: </span><span class="si">#{</span><span class="n">A</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:ma_method2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># it will print &quot;false&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;-------------&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span>
</span><span class='line'>  <span class="c1"># &quot;extend&quot; sets the module methods as class methods of the class</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Ma</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">B</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;b Responds to ma_method1? : </span><span class="si">#{</span><span class="n">b</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:ma_method1</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># it will print &quot;false&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;B Responds to ma_method1? : </span><span class="si">#{</span><span class="n">B</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:ma_method1</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># it will print &quot;true&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;b responds to ma_method2? : </span><span class="si">#{</span><span class="n">b</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:ma_method2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>  <span class="c1"># it will print &quot;false&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;B responds to ma_method2? : </span><span class="si">#{</span><span class="n">B</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:ma_method2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># it will print &quot;false&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;-------------------&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to define and use class-level variables while mixing in Modules]]></title>
    <link href="http://pmatsinopoulos.github.com/blog/2012/10/09/how-to-define-and-use-class-level-variables-while-mixing-modules/"/>
    <updated>2012-10-09T19:47:00+03:00</updated>
    <id>http://pmatsinopoulos.github.com/blog/2012/10/09/how-to-define-and-use-class-level-variables-while-mixing-modules</id>
    <content type="html"><![CDATA[<p>There are sometimes that you might want to use class-level variables in a reusable <code>module</code>. How will you do that? Here is a sample ruby program that does that:</p>

<figure class='code'><figcaption><span>Example of Modules and class-level variables</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;set&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Cacheable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">send</span> <span class="ss">:extend</span><span class="p">,</span> <span class="no">ClassMethods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cached_keys</span>
</span><span class='line'>      <span class="vi">@cached_keys</span> <span class="o">||=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_cached_key</span><span class="p">(</span><span class="n">key_sym</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@cached_keys</span> <span class="o">||=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="vi">@cached_keys</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">key_sym</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Cacheable</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Cacheable</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;A cached keys: </span><span class="si">#{</span><span class="n">A</span><span class="o">.</span><span class="n">cached_keys</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;B cached keys: </span><span class="si">#{</span><span class="n">B</span><span class="o">.</span><span class="n">cached_keys</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">add_cached_key</span><span class="p">(</span><span class="ss">:a</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;A cached keys: </span><span class="si">#{</span><span class="n">A</span><span class="o">.</span><span class="n">cached_keys</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;B cached keys: </span><span class="si">#{</span><span class="n">B</span><span class="o">.</span><span class="n">cached_keys</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">B</span><span class="o">.</span><span class="n">add_cached_key</span><span class="p">(</span><span class="ss">:b</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;A cached keys: </span><span class="si">#{</span><span class="n">A</span><span class="o">.</span><span class="n">cached_keys</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;B cached keys: </span><span class="si">#{</span><span class="n">B</span><span class="o">.</span><span class="n">cached_keys</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">add_cached_key</span><span class="p">(</span><span class="ss">:aa</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;A cached keys: </span><span class="si">#{</span><span class="n">A</span><span class="o">.</span><span class="n">cached_keys</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;B cached keys: </span><span class="si">#{</span><span class="n">B</span><span class="o">.</span><span class="n">cached_keys</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">B</span><span class="o">.</span><span class="n">add_cached_key</span><span class="p">(</span><span class="ss">:bb</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;A cached keys: </span><span class="si">#{</span><span class="n">A</span><span class="o">.</span><span class="n">cached_keys</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;B cached keys: </span><span class="si">#{</span><span class="n">B</span><span class="o">.</span><span class="n">cached_keys</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you run the above ruby script, you will get the following output:</p>

<figure class='code'><figcaption><span>Output of running the above ruby script</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">A</span> <span class="n">cached</span> <span class="n">keys</span><span class="p">:</span> <span class="c1">#&lt;Set: {}&gt;</span>
</span><span class='line'><span class="n">B</span> <span class="n">cached</span> <span class="n">keys</span><span class="p">:</span> <span class="c1">#&lt;Set: {}&gt;</span>
</span><span class='line'><span class="n">A</span> <span class="n">cached</span> <span class="n">keys</span><span class="p">:</span> <span class="c1">#&lt;Set: {:a}&gt;</span>
</span><span class='line'><span class="n">B</span> <span class="n">cached</span> <span class="n">keys</span><span class="p">:</span> <span class="c1">#&lt;Set: {}&gt;</span>
</span><span class='line'><span class="n">A</span> <span class="n">cached</span> <span class="n">keys</span><span class="p">:</span> <span class="c1">#&lt;Set: {:a}&gt;</span>
</span><span class='line'><span class="n">B</span> <span class="n">cached</span> <span class="n">keys</span><span class="p">:</span> <span class="c1">#&lt;Set: {:b}&gt;</span>
</span><span class='line'><span class="n">A</span> <span class="n">cached</span> <span class="n">keys</span><span class="p">:</span> <span class="c1">#&lt;Set: {:aa, :a}&gt;</span>
</span><span class='line'><span class="n">B</span> <span class="n">cached</span> <span class="n">keys</span><span class="p">:</span> <span class="c1">#&lt;Set: {:b}&gt;</span>
</span><span class='line'><span class="n">A</span> <span class="n">cached</span> <span class="n">keys</span><span class="p">:</span> <span class="c1">#&lt;Set: {:aa, :a}&gt;</span>
</span><span class='line'><span class="n">B</span> <span class="n">cached</span> <span class="n">keys</span><span class="p">:</span> <span class="c1">#&lt;Set: {:bb, :b}&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, we keep a class level <code>Set</code> of symbols (<code>@cached_keys</code>). We want every <code>class</code> that mixes in <code>Cacheable</code> to have its own instance of that <code>Set</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Solr Journey - Session 001]]></title>
    <link href="http://pmatsinopoulos.github.com/blog/2012/09/30/my-solr-journey-session-001/"/>
    <updated>2012-09-30T14:27:00+03:00</updated>
    <id>http://pmatsinopoulos.github.com/blog/2012/09/30/my-solr-journey-session-001</id>
    <content type="html"><![CDATA[<h2>Why do I take this Journey?</h2>

<p>I have been using Solr the last two years for quite some projects. My work was always done using <a href="http://sunspot.github.com/">sunspot</a>
(via <code>sunspot_rails</code> when one has Rails application), a gem that is a client library for Solr.</p>

<p>You need to know few things about Solr, when using <code>sunspot</code> to access it and do most of the things. <code>sunspot</code> is a fantastic gem and relieves you from
huge amounts of work when storing data in a Solr database.</p>

<p>However, there are times that I felt that I needed to know more. For example, when I was searching for <code>University of Athens</code> and I got no results, but I knew
that my documents had all or any of the words &#8220;University&#8221;, &#8220;of&#8221;, &#8220;Athens&#8221; in their body, or, even worse, there were also documents that were having the whole
phrase &#8220;University of Athens&#8221; in their body. Or I wanted to query with parts of words, or parts of e-mails, and still I was not getting any results. You can see how
I ended up solving these problems reading these two: 1) <a href="http://stackoverflow.com/questions/12650859/why-sunspot-solr-does-not-bring-results-when-i-include-of-word-in-search-query/12653931">Why Sunspot Solr does not bring results when I include “of” word in search query?</a>
 2) <a href="http://stackoverflow.com/questions/12131473/how-can-i-set-sunspot-to-search-for-sequences-of-characters-instead-of-words">How can I set Sunspot to search for sequences of characters instead of words?</a></p>

<p>Hence, I decided to take a journey to Solr. And this will be a registration of my steps to this journey. Understanding how Solr works, will make me manage
better what I can do and achieve with <code>sunspot</code> too.</p>

<p>And here we go</p>

<h2>First steps</h2>

<ul>
<li>I downloaded solr from <a href="http://lucene.apache.org/solr/">here</a></li>
<li>Followed the <a href="http://lucene.apache.org/solr/api-3_6_1/doc-files/tutorial.html">tutorial</a></li>
</ul>


<h3>Summary</h3>

<p>One cannot be but extremely impressed of the features and capabilities of Solr. I believe that I will use to replace many of my MySQL stores that are only
used for querying.</p>

<p>(Next steps will soon follow)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Executing Migration Commands from Rails Console]]></title>
    <link href="http://pmatsinopoulos.github.com/blog/2012/09/25/executing-migration-commands-from-rails-console/"/>
    <updated>2012-09-25T20:19:00+03:00</updated>
    <id>http://pmatsinopoulos.github.com/blog/2012/09/25/executing-migration-commands-from-rails-console</id>
    <content type="html"><![CDATA[<p>Did you know that you can execute migration commands from rails console? Assume that you want to change the column &#8216;name&#8217; of the &#8216;Product&#8217; model, to have a limit of 32 characters and set it to not null. Here is what you can do:</p>

<figure class='code'><figcaption><span>Example of ActiveRecord Migration run from Rails Console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">c</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="o">.</span><span class="n">change_column</span> <span class="ss">:products</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">32</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="o">--</span> <span class="n">change_column</span><span class="p">(</span><span class="ss">:products</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="p">{</span><span class="ss">:limit</span><span class="o">=&gt;</span><span class="mi">32</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="mi">38</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">ALTER</span> <span class="no">TABLE</span> <span class="sb">`products`</span> <span class="no">CHANGE</span> <span class="sb">`name`</span> <span class="sb">`name`</span> <span class="n">varchar</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="no">NOT</span> <span class="no">NULL</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">03</span><span class="mi">96</span><span class="n">s</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
